/**
 * Version Management Tasks for Diocles Mod
 * 
 * This script contains all version-related tasks:
 * - generateVersionConstants: Creates DioclesConstants.java with current version
 * - currentVersion: Displays current version and validates generated constants
 * - bumpPatch/bumpMinor/bumpMajor: Increment version numbers
 * - bumpVersion: Internal function for version bumping logic
 */

// Generate version constants
def generateVersionConstants = tasks.register('generateVersionConstants') {
    def outputDir = file("$buildDir/generated/sources/version/java")
    def outputFile = file("$outputDir/com/shadowbq/diocles/DioclesConstants.java")
    
    outputs.file(outputFile)
    inputs.property("version", version)
    outputs.upToDateWhen { false } // Force task to always run
    
    doLast {
        outputFile.parentFile.mkdirs()
        outputFile.text = """package com.shadowbq.diocles;

/**
 * Auto-generated version constants for the Diocles mod.
 * 
 * ⚠️  WARNING: This file is dynamically generated by Gradle!
 * 
 * This file is automatically generated during the build process by the 
 * 'generateVersionConstants' Gradle task. Any manual changes made to this 
 * file will be lost when the task runs again.
 * 
 * To update the version:
 * - Use './gradlew bumpPatch', './gradlew bumpMinor', or './gradlew bumpMajor'
 * - Or manually edit the version in build.gradle and run './gradlew generateVersionConstants'
 * 
 * Generated: ${new Date()}
 * Source version from build.gradle: ${version}
 */
public class DioclesConstants {
    public static final String VERSION = "${version}";
    public static final String MOD_ID = "diocles";
    public static final String MOD_NAME = "Diocles";
}
"""
    }
}

// Make sure the version constants are generated before compilation
compileJava.dependsOn(generateVersionConstants)
sourceSets.main.java.srcDir("$buildDir/generated/sources/version/java")

// Version validation and display task
tasks.register('currentVersion') {
    group = 'versioning'
    description = 'Display the current version and validate generated constants'
    doLast {
        def currentVersion = version.toString()
        println "Current version: ${currentVersion}"
        
        // Check if DioclesConstants.java exists and validate its content
        def constantsFile = file("$buildDir/generated/sources/version/java/com/shadowbq/diocles/DioclesConstants.java")
        
        if (!constantsFile.exists()) {
            println "⚠️  DioclesConstants.java not found!"
            println "   Run './gradlew generateVersionConstants' to create it."
            return
        }
        
        def constantsContent = constantsFile.text
        def versionPattern = /public static final String VERSION = "([^"]+)";/
        def matcher = constantsContent =~ versionPattern
        
        if (matcher.find()) {
            def generatedVersion = matcher[0][1]
            if (generatedVersion == currentVersion) {
                println "✅ DioclesConstants.java is up to date (version: ${generatedVersion})"
            } else {
                println "❌ DioclesConstants.java version mismatch!"
                println "   Build.gradle version: ${currentVersion}"
                println "   Generated constants:  ${generatedVersion}"
                println "   Run './gradlew generateVersionConstants' to fix this."
            }
        } else {
            println "⚠️  Could not parse version from DioclesConstants.java"
            println "   The file may be corrupted. Run './gradlew generateVersionConstants' to regenerate it."
        }
        
        // Show file locations for reference
        println ""
        println "Version is defined in:"
        println "  - build.gradle (line 7): version = '${currentVersion}'"
        println "  - src/main/resources/fabric.mod.json"
        println "  - README.md (version badge)"
        println "  - Generated: ${constantsFile.path}"
    }
}

// Version bump tasks
tasks.register('bumpPatch') {
    group = 'versioning'
    description = 'Bump patch version (x.y.Z)'
    doLast {
        bumpVersion('patch')
    }
}

tasks.register('bumpMinor') {
    group = 'versioning'
    description = 'Bump minor version (x.Y.z)'
    doLast {
        bumpVersion('minor')
    }
}

tasks.register('bumpMajor') {
    group = 'versioning'
    description = 'Bump major version (X.y.z)'
    doLast {
        bumpVersion('major')
    }
}

/**
 * Internal function to handle version bumping logic
 * Updates version in build.gradle, fabric.mod.json, and README.md
 */
def bumpVersion(String type) {
    def currentVersion = version.toString()
    def versionParts = currentVersion.split('\\.')
    def major = Integer.parseInt(versionParts[0])
    def minor = Integer.parseInt(versionParts[1])
    def patch = Integer.parseInt(versionParts[2])
    
    switch(type) {
        case 'major':
            major++
            minor = 0
            patch = 0
            break
        case 'minor':
            minor++
            patch = 0
            break
        case 'patch':
            patch++
            break
    }
    
    def newVersion = "${major}.${minor}.${patch}"
    println "Bumping version from ${currentVersion} to ${newVersion}"
    
    // Update build.gradle
    def buildFile = file('build.gradle')
    def buildContent = buildFile.text
    buildContent = buildContent.replaceFirst(/version = '[^']*'/, "version = '${newVersion}'")
    buildFile.text = buildContent
    
    // Update fabric.mod.json
    def fabricModFile = file('src/main/resources/fabric.mod.json')
    def fabricContent = fabricModFile.text
    fabricContent = fabricContent.replaceAll(/"version": "[^"]*"/, "\"version\": \"${newVersion}\"")
    fabricModFile.text = fabricContent
    
    // Update README.md
    def readmeFile = file('README.md')
    if (readmeFile.exists()) {
        def readmeContent = readmeFile.text
        readmeContent = readmeContent.replaceAll(/Version-[^-]*-blue/, "Version-${newVersion}-blue")
        readmeFile.text = readmeContent
    }
    
    println "Version updated to ${newVersion} in all files"
    println "Run './gradlew generateVersionConstants' to regenerate DioclesConstants.java"
}
